{
  "name": "cypher-query",
  "version": "0.0.11",
  "description": "Query builder for Cypher (tiny wrapper around string expressions)",
  "scripts": {
    "test": "mocha",
    "prepublish": "coffee -c index.coffee"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/shesek/cypher-query"
  },
  "keywords": [
    "cypher",
    "neo4j",
    "query",
    "builder"
  ],
  "author": {
    "name": "Nadav Ivgi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/shesek/cypher-query/issues"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "coffee-script": "~1.6.3"
  },
  "readme": "Progressive Cypher query builder API. Represnts the query as an object\n(a tiny wrapper around string expressions), allowing to pass it around\nand mutate it.\n\nWritten in CoffeeScript.\n\nThis is alpha quality software. It has not been throughtfully tested.\n\n### Install\n`npm install cypher-query`\n\n### Usage\n```coffee\ncypher = require 'cypher-query'\n\nquery = cypher()\n  .start('n = node(*)')\n  .where('n.name = {name}', name: 'Joe')\n  .where('n.age > {age}')\n  .params(age: 22)\n  .return('n.email', 'n.age')\n\n# Alternative API\nquery = cypher\n  start: 'n = node(*)'\n  where: [ 'n.name = {name}', 'n.age > {age}' ]\n  return: [ 'n.email', 'n.age' ]\n  params: { name: 'Joe', age: 22 }\n\n# Compile with toString() or compile()\nquery.toString() # START n=node(*)\n                 # WHERE n.name = {name} AND n.age > {age}\n                 # RETURN n.email, n.age\n\n# Use params() to get all the collected params\nquery.params() # { name: 'Joe', age: 22 }\n\n# Compile with compile(true) to embed the params into the string\nquery.compile(true) # START n=node(*)\n                    # WHERE n.name = 'Joe' and n.age > 22\n                    # RETURN n.email, n.age\n```\n#### With [thingdom/node-neo4j](https://github.com/thingdom/node-neo4j)\n```coffee\ndb = new neo4j.GraphDatabase\ncypher = require 'cypher-query'\n\ncypher().start('n=node(*)').execute db, (err, res) ->\ncypher(start: 'n=node(*)').execute db, (err, res) ->\n\n# Or install as db.builder()\ncypher.install(db)\ndb.builder().start('n=node(4)').execute (err, res) ->\ndb.builder(start: 'n=node(4)').execute (err, res) ->\n\n# Or install globally to GraphDatabase's prototype\ncypher.install()\n```\n\n#### Utility methods\n```coffee\n# Escape strings\ncypher.escape 'hello \" world!' # \"hello \"\" world!\"\n\n# Escape identifiers\ncypher.escape_identifier 'some ` identifier' # `some `` identifier`\n\n# Build the MATCH pattern arrow string\ncypher.pattern type: 'knows', direction: 'out' # -[:knows]->\n```\n\n### License\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/shesek/cypher-query",
  "_id": "cypher-query@0.0.11",
  "dist": {
    "shasum": "f1e7ab0e0632567fa7d35decbad12cc9ca546edf"
  },
  "_from": "cypher-query@",
  "_resolved": "https://registry.npmjs.org/cypher-query/-/cypher-query-0.0.11.tgz"
}
